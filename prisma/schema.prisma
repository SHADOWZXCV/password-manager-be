generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String  @id @default(cuid())
  name              String  @db.VarChar(50)
  email             String?
  pw                String?
  salt              String?
  verification_code String?
  profile_pic       String?
  vaults            vault[] @relation("uservaults")
  workspace_user    WorkspaceUser[] @relation("UsersInWorkspace")
  workspaces        Workspace[] @relation("creatorsOfWorkspace")
  accounts          UserAccount[] @relation("userAccounts")
}

model UserAccount {
  id          String  @id @default(cuid())
  userId      String
  provider    String  // google, github, local
  provider_id  String  // ID from the provider
  user        User    @relation("userAccounts", fields: [userId], references: [id], onDelete: Cascade)
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model vault {
  id            String        @id @default(cuid())
  name          String
  vault_key     String
  user_id       String
  user          User          @relation("uservaults", fields: [user_id], references: [id], onDelete: Cascade)
  workspace_id  String?
  workspace     Workspace?     @relation("WorkspaceVaults", fields: [workspace_id], references: [id], onDelete: Cascade)
  vault_entries vault_entry[] @relation("vault_entry")
  created_at    DateTime      @db.Timestamp(6)
  updated_at    DateTime      @db.Timestamp(6)
}

model vault_entry {
  id         String   @id @default(cuid())
  content      String // includes name inside & value, encrypted
  vault_id   String
  vault      vault    @relation("vault_entry", fields: [vault_id], references: [id], onDelete: Cascade)
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model Workspace {
  id                  String              @id @default(cuid())
  name                String
  description         String?
  icon_name           String?
  creator_id          String
  created_by          User                @relation("creatorsOfWorkspace", fields: [creator_id], references: [id])
  workspace_users     WorkspaceUser[]     @relation("WorkspaceUsers")
  vaults              vault[]             @relation("WorkspaceVaults")
}

model WorkspaceUser {
  id        String     @id @default(cuid())
  workspace_id  String
  user_id   String
  role      String
  status    String
  user      User        @relation("UsersInWorkspace", fields: [user_id], references: [id], onDelete: Cascade)
  workspace Workspace @relation("WorkspaceUsers", fields: [workspace_id], references: [id], onDelete: Cascade)
}